grammar org.ppgti.regexdsl.RegexDsl with org.eclipse.xtext.common.Terminals

generate regexDsl "http://www.ppgti.org/regexdsl/RegexDsl"

RegularExpressions:
    regexs+=RegularExpression*
;

RegularExpression:
    'regex' name=ID struct=ExpressionStruct
;

ExpressionStruct:
    '{' ((expressions+=Expression) (expressions+=Expression)*)? '}'
;

Expression:
    Group |
    Set |
    Range |
    Quantifier |
    Comment |
    GroupBackreference |
    Anchor |
    RawExpression
;

RawExpression:
    value=(ID | STRING)
;

/*
 * Group
 */
Group:
    'group' 
    (non_capturing?='non_capturing')?
    (name=ID)?
    struct=ExpressionStruct
;

GroupBackreference:
    'backreference' '(' value=STRING ')'
;

/*
 * Anchor
 */
Anchor:
    'anchor' (negate?='negate')? struct=ExpressionStruct
;

/*
 * Set
 */
Set:
    'set' struct=ExpressionStruct
;

/*
 * Quantifier
 */
Quantifier:
    'quantifier' '(' (attributes+=AttributesQuantifier) (',' attributes+=AttributesQuantifier)* ')'
;

AttributesQuantifier:
    key=AttributesQuantifierKeys '=' value=Value
;

AttributesQuantifierKeys:
    'size' | 'min' | 'max' | 'without_maximum'
;

/*
 * Range
 */
Range:
    'range' value=ValidRange
;

ValidRange:
    (DIGIT | CHAR) (DIGIT | CHAR)
;

/*
 * Comment
 */
 Comment:
     'comment' value=STRING
 ;

/*
 * Terminals
 */
terminal DIGIT: '0'..'9';
terminal BOOLEAN: ('true'|'false');
terminal CHAR: ('a'..'z'|'A'..'Z');

enum Constants:
    ANY = '.' |
    DOT = '\\.' |
    DIGIT = '\\d' |
    WHITESPACE = '\\s' |
    WORD_CHARS = '\\w' |
    SLASH = '\\/.' |
    NOT_DIGIT = '\\D' |
    NOT_WHITESPACE = '\\S' |
    NOT_WORD_CHARS = '\\W' |
    ZERO_OR_ONE = '?' |
    ZERO_OR_MULTIPLE = '*' |
    ONE_OR_MULTIPLE = '+' |
    HYPHEN = '\\-'
;

Value:
    INT | DIGIT | STRING | ANY_OTHER | BOOLEAN
;